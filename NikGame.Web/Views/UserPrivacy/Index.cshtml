@using NikGame.Service;
@{
    ViewData["Title"] = "Start Game";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var Messages = (List<string>)ViewBag.Messages;
}

<section id="app" class="pt-5 pb-5">
    <div class="container">
        <div v-if="!gameSart" class="row">
            <div class="col-md-4 offset-md-4">
                <div class="card text-white bg-dark shadow">
                    <div class="card-body">
                        <div class="text-center pt-2 pb-2">
                            <button v-on:click="startGame()" type="button" class="btn btn-outline-warning">Start Game <i class="fa-regular fa-gamepad"></i></button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div v-if="gameOver" class="row">
            <div class="col-md-4 offset-md-4">
                <div class="card text-white bg-dark shadow">
                    <div class="card-body">
                        <div class="text-center pt-2 pb-2">
                            <h1>GAME OVER</h1>
                            <p>{{gameInfo.title}}_{{gameInfo.id}} - Winer: {{gameInfo.firstName}} {{gameInfo.firstName}}</p>
                            <h4>Score: {{gameInfo.winerScore}}</h4>
                            <button v-on:click="startGame()" type="button" class="btn btn-outline-warning">Start New Game</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div v-if="gameSart && !gameOver" class="row">
            <div class="col-md-4">
                <ul class="list-group">
                    <li v-for="(item, index) in topClients" class="list-group-item">{{index + 1}} - {{item.firstName}} {{item.lastName}} - Score is: {{item.totalScore}}</li>
                </ul>
            </div>
            <div class="col-md-8">
                <div class="row">
                    <div class="col-md-6 offset-md-4">
                        <div class="card text-white bg-dark shadow">
                            <div class="card-body">
                                <div class="text-center pt-2 pb-2">
                                    <b>Remaining Time: {{timer.minutes}} : {{timer.seconds}}</b>
                                    <p class="text-muted"><b>Total Scores: {{totalScore}}</b> - <b>Shoot Score: {{currentShoot.shotScore}}</b></p>
                                    <button id="btnshoot" v-on:click="shootDart()" type="button" class="btn btn-outline-warning">SHOOT <i v-if="!shootEnable" class="fas fa-cog fa-spin"></i></button>
                                    <p v-if="!shootEnable">Please Wait ...</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div v-if="loading" class="loading">
        <div class="loading-bar">
            <div class="loading-icon">
                <i class="fas fa-cog fa-spin"></i>
            </div>
            <div class="loading-text">
                Please Wait ...
            </div>
        </div>
    </div>
</section>

<script src="~/lib/signalr/dist/browser/signalr.min.js"></script>

<script>
    "use strict";

    var connection = new signalR.HubConnectionBuilder().withUrl("/DartHub").build();

    connection.on("ReceiveMessage", sendMessage);
    connection.on("UpdateMatchTops", updateMatchTops);
    connection.on("FinishGame", finishGame);

    connection.start().then(function () {
        //document.getElementById("sendButton").disabled = false;
    }).catch(function (err) {
        return console.error(err.toString());
    });

    $(document).ready(function () {
        getInstance({
            el: '#app',
            mixins: [utilities],
            data: {
                bUrl: '/api/DartsPlay/',
                loading: false,
                match: {
                    id: 0,
                    title: '',
                    startDate: ''
                },
                opponents: [],
                currentShoot: {
                    id: 0,
                    shotScore: 0,
                    createDate: '',
                },
                gameOver: false,
                topClients: [],
                gameSart: false,
                totalScore: 0,
                scores: [1, 2, 3, 5, 10, 15, 25],
                remaining: 300,
                tikTak: null,
                timer: {
                    minutes: 0,
                    seconds: 0
                },
                gameInfo: {
                    id: 0,
                    title: '',
                    winerId: null,
                    winerScore: 0,
                    firstName: '',
                    lastName: ''
                },
                shootEnable: true,
            },
            created: function () {
            },
            methods: {
                startGame: function () {
                    var self = this;
                    this.loading = true;
                    this.getApi(this.bUrl + "StartGame")
                        .then((apiResults) => {
                            if (apiResults.status === 200) {
                                self.match = apiResults.data.match;
                                self.opponents = apiResults.data.opponents;
                                self.getTops();
                                self.totalScore = apiResults.data.totalScore;
                                self.getRemain(self.match.startDate);
                                self.setTimer();
                                self.gameSart = true;
                                self.gameOver = false;
                            } else {
                                self.showMessage({ message: apiResults.message, type: 'error' });
                            }
                            this.loading = false;
                        });
                },
                shootDart: function () {
                    var self = this;
                    this.changeShootBtn();
                    this.getApi(this.bUrl + "DartsShoot/?matchId=" + this.match.id + '&score=' + this.getShootScore())
                        .then((apiResults) => {
                            if (apiResults.status === 200) {
                                self.currentShoot = apiResults.data.shoot;
                                self.totalScore = apiResults.data.totalScore;
                                self.gameOver = apiResults.gameOver;
                            } else {
                                if (apiResults.gameOver) {
                                    self.gameOver = apiResults.gameOver;
                                }
                                self.showMessage({ message: apiResults.message, type: 'error' });
                            }
                        });
                },
                getTops: function () {
                    var self = this;
                    this.getApi(this.bUrl + "GetTopMatchUsers/?matchId=" + this.match.id + "&size=3")
                        .then((apiResults) => {
                            if (apiResults.status === 200) {
                                self.topClients = apiResults.data;
                            } else {
                                self.showMessage({ message: apiResults.message, type: 'error' });
                            }
                        });
                },
                setGameOver: function () {
                    var self = this;
                    this.loading = true;
                    this.getApi(this.bUrl + "FinishGame/?matchId=" + this.match.id)
                        .then((apiResults) => {
                            if (apiResults.status === 200) {
                                self.gameInfo = apiResults.data;
                                self.gameOver = true;
                                
                            } else {
                                self.showMessage({ message: apiResults.message, type: 'error' });
                            }
                            this.loading = false;
                        });
                },
                getShootScore: function () {
                    var trueChance = Math.floor(Math.random() * 100);
                    if (trueChance < 61) {
                        var item = this.scores[Math.floor(Math.random() * this.scores.length)];
                        return item;
                    } else {
                        return 0;
                    }
                },
                getRemain: function (dt) {
                    var d1 = new Date(dt);
                    var d2 = new Date();
                    this.remaining = 300 - Math.floor((d2.getTime() - d1.getTime()) / 1000);
                },
                setTimer: function () {
                    if (this.tikTak != null) {
                        clearInterval(this.tikTak);
                    }
                    var self = this;
                    this.tikTak = setInterval(function () {
                        self.timer.minutes = Math.floor(self.remaining / 60);
                        self.timer.seconds = Math.floor(self.remaining % 60);
                        self.remaining--;
                        if (self.remaining < 0) {
                            clearInterval(self.tikTak);
                            self.setGameOver();
                        }
                    }, 1000);
                },
                changeShootBtn: function () {
                    var self = this;
                    this.shootEnable = false;
                    $('#btnshoot').prop("disabled", true);
                    setTimeout(function () {
                        $('#btnshoot').prop("disabled", false);
                        self.shootEnable = true;
                    }, 2000);
                }
            }
        }, 'game');

    });

    function sendMessage(user, message) {
        alert(`${user} says ${message}`);
    }

    function updateMatchTops(matchId) {
        rootObjects.game.getTops(matchId);
    }

    function finishGame(matchId) {
        //rootObjects.game.setGameOver();
    }
</script>

